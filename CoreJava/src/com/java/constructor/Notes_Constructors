Rules for Constructors:
	i) Constructors can use any access modifier, including private. (A private constructor means only code 
		within the class itself can instantiate an object of that type, so if the private constructor class 
		wants to allow an instance of the class to be used, the class must provide a static method or variable
		that allows access to an instance created from within the class.)
		
	ii) The constructor name must match the name of the class.
	
	iii) Constructors must not have a return type.
	
	iv) It's legal (but stupid) to have a method with the same name as the class, but that doesn't make it a 
		 constructor. If you see a return type, it's a method rather than a constructor. In fact, you could have 
		 both a method and a constructor with the same name—the name of the class—in the same class, and that's not 
		 a problem for Java. Be careful not to mistake a method for a constructor—be sure to look for a return type.
	
	v) If you don't type a constructor into your class code, a default constructor will be automatically generated 
		by the compiler.
	
	vi) The default constructor is ALWAYS a no-arg constructor.
	
	vii) If you want a no-arg constructor and you've typed any other constructor(s) into your class code, the compiler 
		  won't provide the no-arg constructor (or any other constructor) for you. In other words, if you've typed in a 
		  constructor with arguments, you won't have a no-arg constructor unless you type it in yourself!
		  
	viii) Every constructor has, as its first statement, either a call to an overloaded constructor (this()) or a call 
		   to the superclass constructor (super()), although remember that this call can be inserted by the compiler.
		   
	ix) If you do type in a constructor (as opposed to relying on the compiler-generated default constructor), and you 
		 do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super() for you, 
		 as the very first statement in the constructor.
		 
	x) A call to super() can be either a no-arg call or can include arguments passed to the super constructor.
	
	xi) A no-arg constructor is not necessarily the default (i.e., compiler-supplied) constructor, although the default 
		 constructor is always a no-arg constructor. The default constructor is the one the compiler provides! While the 
		 default constructor is always a no-arg constructor, you're free to put in your own noarg constructor.
		 
	xii) You cannot make a call to an instance method, or access an instance variable, until after the super constructor runs.
	
	xiii) Only static variables and methods can be accessed as part of the call to super() or this(). 
		   (Example: super(Animal.NAME) is OK, because NAME is declared as a static variable.)
		   
	xiv) Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
	
	xv) Interfaces do not have constructors. Interfaces are not part of an object's inheritance tree.
	
	xvi) The only way a constructor can be invoked is from within another constructor.
		  In other words, you can't write code that actually calls a constructor as follows:
			class Horse {
				Horse() { } // constructor
				void doStuff() {
					Horse(); // calling the constructor - illegal!
				}
			}
			

By default java inserts a default constructor in your class only if 
	i) The class does not contain a default constructor
	ii) The class does not contain a parameterized constructor

By default the first line call in the subclass constructor will be "super()", which is a call to the default constructor in the super class
The first line of the constructor can be either super() or this(), but cannot be both at the same time. 
this() --> calls the current class default constructor
this("hi") --> calls the class String parameterized constructor.

When the super class has only a parameterized constructor then the sub class constructor must override the "super()" method, since by 
default java inserts a super() and makes a call to the super class default constructor which is not available, causing compilation error.
 
By default every constructor in the sub class calls the default constructor in its super class unless the super() is overridden. 

Note: Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in 
		when the method is invoked. When you invoke a method, the arguments used must match the declaration's parameters in type and order.						   