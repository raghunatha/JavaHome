
**********
DATABASE
**********
SQL Injection:
http://www.imperva.com/resources/glossary/sql_injection.html
SQL injection is a code injection technique that exploits a security vulnerability in a website's software
In SQl Injection the attacker injects a malicious sql that are designed to be executed with normal sql statements.
Because of this the hacker can bypass the authatication and authorization in a web site and can view the database records.
Use place holder like ? or by using :name --> called named placeholder
for ? set the values as query.setInteger(position, value);
for :name set the value as query.setInteger(placeholdername, value); --> javabrains hibernate tutorial 27
=============================================================================================
VIEW:
A view is a virtual table that consists of columns from one or more tables.
http://stackoverflow.com/questions/2944597/what-is-the-use-of-view-in-sql-server

INDEX:
Index in a database is used for faster retrieval of data.
http://odetocode.com/code/237.aspx
http://stackoverflow.com/questions/1108/how-does-database-indexing-work

=============================================================================================
LAZY LOADING:
Lazy loading is a design pattern commonly used in computer programming to defer initialization of an object until the point at which it is needed. 
It can contribute to efficiency in the program's operation if properly and appropriately used

=============================================================================================
Difference Between Delete, Trunceate, Drop
i) Delete: Data alone deleted, Doesn't perform automatic commit	.
ii) Truncating: Data alone deleted, Performs an auto commit. Faster than Delete.
iii) Dropping: Table Structure and Data are deleted.

=============================================================================================
HAVING:
Having clause is used only with group functions
Ex: SELECT Customer,SUM(OrderPrice) FROM Orders GROUP BY Customer HAVING SUM(OrderPrice)<2000

=============================================================================================
COUNT:
SELECT COUNT(column_name) FROM table_name --> null values not counted
SELECT COUNT(*) FROM table_name --> null values are counted
SELECT COUNT(DISTINCT column_name) FROM table_name --> number of distinct values of the specified column (null column will not be considered)

=============================================================================================
PRIMARY Key & UNIQUE Key Differences
Both primary key and unique enforce uniqueness of the column on which they are defined
primary key doesn't allow NULLs, but unique key allows one NULL only.

=============================================================================================
JOINS:
SQL joins are used to query data from two or more tables, based on a relationship between certain columns in these tables.
LEFT JOIN:
The LEFT JOIN keyword returns all rows from the left table (table_name1), even if there are no matches in the right table (table_name2)
	Ex: SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName
RIGHT JOIN:
The RIGHT JOIN keyword returns all the rows from the right table (table_name2), even if there are no matches in the left table (table_name1).
	Ex: SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.P_Id=Orders.P_Id ORDER BY Persons.LastName

=============================================================================================
In general, to process any SQL statement with JDBC, you follow these steps:
i) Establishing a connection.
ii) Create a statement.
iii) Execute the query.
iv) Process the ResultSet object.
v) Close the connection.

=============================================================================================
STATEMENT:
The Statement interface lets you execute a simple SQL statement with no parameters.
The SQL instructions are inserted into the Statement object when the Statement.executeXXX method is called.

=============================================================================================
RESULTSET:
The ResultSet interface manages access to data returned from a query. 
The data returned equals one row in a database table. 
Some queries return one row of data while many queries return multiple rows of data
	Ex: ResultSet results = stmt.executeQuery("SELECT * FROM Employee ");
	Ex: String updateString = "INSERT INTO dba VALUES (some text)";
		int count = stmt.executeUpdate(updateString);
		
		while (resultSet.next()) {
			// Printing results to the console
			System.out.println("Roll No- " + resultSet.getInt("RollNo")
							+ ", Name- " + resultSet.getString("Name")
							+ ", Course- " + resultSet.getString("Course")
							+ ", Address- " + resultSet.getString("Address"));
		}
		
		Updating rows in result set
		while (resultSet.next()) {
            float f = resultSet.getFloat("PRICE");
            resultSet.updateFloat( "PRICE", f * percentage);
            resultSet.updateRow();
        }

=============================================================================================
PREPARED STATEMENT:
The PreparedStatement interface descends from the Statement interface and uses a template to create a SQL request. 
Use a PreparedStatement to send precompiled SQL statements with one or more parameters.
Use a PreparedStatement to send precompiled SQL statements with one or more parameters.
	Ex: PreparedStatement pstmt = con.prepareStatement( select userName from registration where emailaddress like ?");
		//Initialize first parameter with email address
		pstmt.setString(1, emailAddress);
		ResultSet results = ps.executeQuery();
	Ex: PreparedStatement ps = con.prepareStatement( "insert into registration(userName, password, emailaddress, creditcard, balance) values (?, ?, ?, ?, ?)");
		ps.setString(1, theuser);
		ps.setString(2, password);
		ps.setString(3, emailaddress);
		ps.setString(4, creditcard);
		ps.setDouble(5, balance);
		ps.executeUpdate();			
Once the PreparedStatement template is initialized, only the changed values are inserted for each call.
		
=============================================================================================	
CALLABLE STATEMENT:
CallableStatement cs = con.prepareCall("{call accountlogin(?,?,?,?)}");
  cs.setString(1,theuser); --> IN parameter
  cs.setString(2,password); --> IN parameter
  cs.registerOutParameter(3,Types.DATE); --> Registering OUT parameter
  cstmt.registerOutParameter(1, java.sql.Types.VARCHAR); --> Registering INOUT parameter
  cstmt.setString(4, usercity); --> setting value to INOUT parameter

  cs.executeQuery();
  Date lastLogin = cs.getDate(3);
  String cityCode = cs.getString(4);

http://docs.oracle.com/javase/tutorial/jdbc/basics/storedprocedures.html

http://www.mkyong.com/jdbc/jdbc-callablestatement-stored-procedure-in-parameter-example/
http://www.mkyong.com/jdbc/jdbc-callablestatement-stored-procedure-out-parameter-example/

For stored procedure returns OUT parameters, it must be
	i) Registered via JDBC CallableStatement.registerOutParameter(index,sqlType).
	ii) Get it back via CallableStatement.getDataType(index).

http://publib.boulder.ibm.com/infocenter/iseries/v7r1m0/index.jsp?topic=%2Frzaha%2Fcallable.htm		
=============================================================================================	
JDBC BATCH UPDATES:
http://publib.boulder.ibm.com/infocenter/iseries/v7r1m0/index.jsp?topic=%2Frzaha%2Fcallable.htm	

=============================================================================================
Transaction Isolation Levels

=============================================================================================	

HIBERNATE dynamic-insert

The dynamic-insert attribute tells Hibernate whether to include null properties in the SQL INSERT statement
	i) The default value of dynamic-insert is false, which means include null properties in the Hibernate’s SQL INSERT statement.
	ii) If set the dynamic-insert to true, which means exclude null property values in the Hibernate’s SQL INSERT statement.
Ex: <class ... table="stock_transaction" catalog="mkyong" dynamic-insert="true">

=============================================================================================
HIBERNATE dynamic-update

The dynamic-update attribute tells Hibernate whether to include unmodified properties in the SQL UPDATE statement.	
	i) The default value of dynamic-update is false, which means include unmodified properties in the Hibernate’s SQL update statement.
	ii) If set the dynamic-insert to true, which means exclude unmodified properties in the Hibernate’s SQL update statement
Ex: <class ... table="stock_transaction" catalog="mkyong" dynamic-update="true">	

============================================================================================
TRANSACTION:
Its a series of operations we wish to carry out against the database

=============================================================================================
SELECTBEFOREUPDATE:
selectbeforeupdate=true
This hibernate property does a select before updating the record to the db.(It fires a select query and checks with the existing record, it fires an update only if both the records differ)

=============================================================================================
Single Table Inheritance Strategy : Creating one common table for all the tables (parent and sub classes) --> javabrains hibernates tutorial 17
Discriminator column will be generated in the above column which differentiates the parent class from the child classes

One more inheritance hirarchy is: can be table per class also.
The properties inherited from the parent class will be duplicated in the child tables also.
In table per class hirearchy a discriminator is not required

One more inheritance hirarchy is: can be JOIN class strategy.
All the parent columns will be stored in parent and only the child columns will be present in the child table	

=============================================================================================
**********
SERVERS
**********
Difference between Jboss and weblogic server
i) jboss server is faster, it internally contains tomcat for web server and its own application server
ii) When web server only is used in jboss the performance is higher
iii) weblogic, the application server is heavy and when it runs it need to run all the related components
iv) weblogic's web based administrative console can be used for the configuration of JMS, Data source, security settings and so on. UI is not given in Jboss
v) web logic is expensive, jboss is free. 

=============================================================================================
Memory management in java
http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf
http://www.capitalware.biz/dl/docs/WhitePaperJavaCodingPractices.pdf
http://javarevisited.blogspot.com/2010/10/improving-performance-of-application-in.html
jprobe - http://www.youtube.com/watch?v=WrZzBXxE218&feature=relmfu

JAVA HEAP SPACE:
This indicates that an object cannot be allocated in the heap.
The issue may be just a configuration problem.
One more reason could be the excessive use of finalizers by the application.
jconsole management tool can be used to monitor the number of objects that are pending finalization.
maximum heap size specified by the  –Xmx
 
PERMGEN SPACE:
This the area of the heap where jvm stores its meta data
If an application loads more no of classes, then the permanent generation may need to be increased. 
–XX:MaxPermSize=n

REQUESTED ARRAY SIZE EXCEEDS VM LIMIT:
When app attempts to allocate an array that is larger than the heap size.
Caused by either the heap size is too small or a bug in calculating the array intial size incorrectly

Use stringbuffer in place of string if you are doing lots of string manipulation it will reduce memory by avoiding creating lots of string garbage.
Every time a string is modified a new string object is created(since strings are immutable). This is an overhead to GC.
Using a string buffer, the intermediate objects are not created requesting less GC. 	

try to make variable , class , method final whenever possible that’s allow compiler to do lots of optimization e.g. compile time binding so you will get faster output.
Objects with final fields can be passed from one thread to another with out synchronization. It helps robust software design.
Accessing a final member can be slightly faster than accessing a non-final member. Member variables can be declared final, unless there is a compellin reason for not doing it.	

static methods are binded at compile time while non static methods are resolved at runtime based on object type so static method will be faster than non static.

Use ternary operator when possible, where if else can be used 

don't call methods in for loop for checking condition e.g. length() size() etc. instead of doing this , use modified version
for(int i=0; i<vector.size();i++)

int size = vector.size(); 
for(int i=0; i<size;i++)

Use minimum amount of synchronization for improving the performance. 
Synchronization causes the overhead of managing the locks on the resources by JVM

Use lazy-loading of dependent objects

OutputStream can be faster than PrintWriter.

Use stateless session EJBs to cache and manage infrequently changed data. Update the EJB occasionally.

Use a dedicated session bean to perform and cache all JNDI lookups in a minimum number of requests.

=============================================================================================
********
SERVLETS
********
Servlets in java are not thread safe(though they could be made threadsafe by implementing singleThreadModel
So that would mean that if there are multiple concurrent requests to the same servlet it would be served by the same instance.

=============================================================================================
************
WEB SERVICES
************
http://theopentutorials.com/tutorials/web-services/web-services-platform/

XML NAMESPACE:
XML namespaces are used for providing uniquely named elements and attributes in an XML document
XML Namespaces provide a method to avoid element name conflicts.
The namespace is defined by the xmlns attribute in the start tag of an element
The namespace declaration has the following syntax. xmlns:prefix="URI"
	Ex: xmlns:h="http://www.w3.org/TR/html4/"		
The most common URI is the Uniform Resource Locator (URL) which identifies an Internet domain address	

=============================================================================================
XSLT: 
EXtensible Stylesheet Language Transformations
XSLT is an XML language that can be used to transform XML documents into other formats, like HTML

=============================================================================================
XPath:
A language for navigating in XML documents 	
XPath is a language for finding information in an XML document.

<?xml version="1.0" encoding="ISO-8859-1"?>

<bookstore>
  <book>
    <title lang="en">Harry Potter</title>
    <author>J K. Rowling</author>
    <year>2005</year>
    <price>29.99</price>
  </book>
</bookstore>

<bookstore> (root element node)
<author>J K. Rowling</author> (element node)
lang="en" (attribute node)

=============================================================================================
Why web-services?
Web-services are based on service oriented architecture. They are platform independent. 
Web-services make the application highly loose coupled - for example a J2EE application can communicate with a .NET application with little effort and without any great hiccups

=============================================================================================
Can you explain under what circumstances you avoided using XML for data exchange?
I worked on a banking application which had a suite of in-built applications which were built on the J2EE architecture platform. 
And we had general wrapper value objects which could be used across applications. 
There it did not make sense to convert the value object to XML just for the sake of using XML.

=============================================================================================
******
SPRING
******
http://www.javabeat.net/2009/02/spring-framework-interview-questions/
http://www.javabeat.net/2007/10/integrating-spring-framework-with-hibernate-orm-framework/
http://www.javabeat.net/2007/06/introduction-to-spring-mvc-web-framework-web-tier/

LIFE CYCLE MANAGEMENT
http://www.javabeat.net/2007/10/life-cycle-management-of-a-spring-bean/

=============================================================================================
READING THE BEAN CONFIG FILE

ApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(getServlet().getServletContext());
ApplicationContext context = new ClassPathXmlApplicationContext("com/spring/hibernate/spring-hibernate.xml");
SpringHibernateUserDAO dao = (SpringHibernateUserDAO)context.getBean("springHibernateDAO");
		
=============================================================================================
SPRING- SINGLETON		
Singleton scope in Spring means that this bean will be instantiated only once by Spring. 
In contrast to the prototype scope (new instance each time), 
request scope (once per request), 
session scope (once per HTTP session).

Singleton scope has technically nothing to do with the singleton design pattern. 
You don't need to implement your beans as singletons for them to be put in the singleton scope.

In singleton, only a single instance per Spring IoC container, no matter how many times you retrieve it with getBean(), 
it will always return the same instance.

=============================================================================================
DEPENDENCY CHECKING

none – No dependency checking.
simple – If any properties of primitive type (int, long,double…) and collection types (map, list..) have not been set, UnsatisfiedDependencyException will be thrown.
objects – If any properties of object type have not been set, UnsatisfiedDependencyException will be thrown.
all – If any properties of any type have not been set, an UnsatisfiedDependencyException
will be thrown.

Try @Required annotation, it is more flexible than dependency checking in XML file, because it can apply to a particular property only.

=============================================================================================
INITIALIZATION  BEAN & DISPOSABLE BEAN:
InitializingBean and DisposableBean are two marker interfaces, a useful way for Spring to perform certain actions upon bean initialization and destruction

	i) For bean implemented InitializingBean, it will run afterPropertiesSet() after all bean properties have been set.
	ii) For bean implemented DisposableBean, it will run destroy() after Spring container is released the bean.
	
=============================================================================================
INIT & DESTROY Methods

In Spring, you can use init-method and destroy-method as attribute in bean configuration file for bean to perform certain actions upon initialization and destruction. 
Alternative to InitializingBean and DisposableBean interface

It’s always recommended to use init-method and destroy-method in bean configuration file, 
instead of implement the InitializingBean and DisposableBean interface to cause unnecessarily coupled your code to Spring.

<bean id="customerBean" class="com.spring.Customer" 
		init-method="initIt" destroy-method="cleanUp"> 
		<property name="message" value="i'm property message" />
</bean>

=============================================================================================
AUTO WIRING BEANS:
Wiring is the process of establishing linkage between two components and it is the responsibility of the developer to make this association to happen. 
Auto-wiring is the process of establishing linkage between components with the help of Spring Container without the intervention of developer
Auto-wiring can be done either by type or by name.
And if no matching found, just do nothing.

1) no – Default, no auto wiring, set it manually via “ref” attribute
Ex:- <bean id="customer" class="com.mkyong.common.Customer">
		<property name="person" ref="person" />
	 </bean>
	 
2) byName – Auto wiring by property name. If the name of a bean is same as the name of other bean property, auto wire it.
Ex:- <bean id="customer" class="com.mkyong.common.Customer" autowire="byName" />

3) byType – Auto wiring by property data type. If data type of a bean is compatible with the data type of other bean property, auto wire it.
			What if you have two beans with same data type of a class ? (like 2 bean entries for Address class with different id's)
			In autowiring by type mode, you just have to make sure only one unique data type of bean is declared.
Ex:- <bean id="customer" class="com.mkyong.common.Customer" autowire="byType" />

4) constructor – byType mode in constructor argument.

5) autodetect – If a default constructor is found, use “autowired by constructor”; Otherwise, use “autowire by type”.

=============================================================================================