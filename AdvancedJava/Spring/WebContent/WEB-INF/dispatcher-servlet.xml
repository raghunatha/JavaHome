<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	">

	<!-- Enable annotation driven controllers, validation etc... -->
	<mvc:annotation-driven />

	<!-- Tells the spring controller to search for all classes in the below given packages to see if it has
		@Controller, or @Repository, or @Service, or @Component and if it does then Spring will register the
		class with the bean factory as if you had typed <bean calss="..." /> in the xml configuration files. -->
	<context:component-scan base-package="com.rnr.controllers" />

	<!-- Used to resolve the view by building the exact location of the file that needs to picked up
		 (prefix + view name + suffix) -->
	<!-- Apart from the below one we can also configure XML view resolver and resourcebundleviewresolver -->	 
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- location to Resource bundle which stores messages as key value pairs -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/WEB-INF/messages" />
	</bean>

	<!-- Configure the multipart resolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>
	
	<!-- Check out the use of this -->
	<!-- <mvc:default-servlet-handler />  -->

</beans>
